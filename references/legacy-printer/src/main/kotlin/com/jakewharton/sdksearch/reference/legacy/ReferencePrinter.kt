@file:JvmName("ReferencePrinter")

package com.jakewharton.sdksearch.reference.legacy

import com.jakewharton.sdksearch.api.dac.DacComponent
import com.jakewharton.sdksearch.reference.PRODUCTION_DAC
import kotlinx.coroutines.runBlocking
import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

fun main(vararg args: String) = runBlocking {
  val client = OkHttpClient()
  val service = DacComponent.builder()
      .baseUrl(HttpUrl.get(PRODUCTION_DAC))
      .client(client)
      .build()
      .documentationService()

  val items = service.list().await().values.single().sortedBy { it.type }

  // Shut down OkHttpClient resources so that the JVM can exit cleanly.
  client.dispatcher().executorService().shutdown()
  client.connectionPool().evictAll()

  println("// Generated by https://github.com/JakeWharton/SdkSearch/tree/master/references/legacy-printer")
  println("// ${DateTimeFormatter.RFC_1123_DATE_TIME.format(ZonedDateTime.now())}")
  println("var DATA = [")
  items.forEachIndexed { index, item ->
    val deprecated = (item.metadata == "deprecated").toString()
    val type = if (item.link.endsWith("/package-summary")) "package" else "class"
    val link = item.link.removePrefix("/")
    println("""      { id:$index, label:"${item.type}", link:"$link", type:"$type", deprecated:"$deprecated" },""")
  }
  println("];")
}
